from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from config import bot, options
from modules.report_actions import ReportActions
from os import remove 

report_generator = Router(name='report_generator')

async def _report_generator(user_id: str, send_to_email: bool = False) -> list:
    async with ReportActions() as module:
        generate_report_response = await module._generate_report(
            str(user_id), send_to_email
        )
    
    status, err_description, data = (
        generate_report_response.get('status', 'error'), 
        generate_report_response.get('err_description', ''),
        generate_report_response.get('data', {})
    )

    return [
        status, err_description, data
    ]

@report_generator.message(F.text == '–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü')
async def _report_generator_without_sending_to_email(message: Message):
    user_id = message.from_user.id

    await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø–æ—á–µ–∫–∞–π—Ç–µ! ‚è∞')

    status, err_description, data, *_ = await _report_generator(user_id)

    if status == 'success' and data:
        await bot.send_document(chat_id=user_id, document=FSInputFile(data))
        remove(data)

    elif err_description:
        await message.answer(err_description, parse_mode='HTML', reply_markup=options())
    
    else:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n–ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start', reply_markup=options())
    
@report_generator.message(F.text == '–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –ø–æ—à—Ç—É')
async def _report_generator_with_sending_to_email(message: Message):
    user_id = message.from_user.id

    await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø–æ—á–µ–∫–∞–π—Ç–µ! ‚è∞')

    status, err_description, data, *_ = await _report_generator(user_id, True)

    if status == 'success':
        await message.answer('–ó–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—à—Ç—É. üéâ', parse_mode='HTML', reply_markup=options())

    elif err_description:
        await message.answer(err_description, parse_mode='HTML', reply_markup=options())
    
    else:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n–ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start', reply_markup=options())
    